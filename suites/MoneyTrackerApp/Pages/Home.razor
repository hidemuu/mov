@page "/"
@inject IJSRuntime JSRuntime
@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration
@using System.Text

<h3>お金の流れの可視化</h3>

<!-- ファイル選択 -->
<InputFile OnChange="OnFileSelected" />

<!-- 入出金情報テーブル -->
<table class="table">
    <thead>
        <tr>
            <th>日付</th>
            <th>内容</th>
            <th>出金金額(円)</th>
            <th>入金金額(円)</th>
            <th>残高(円)</th>
            <th>メモ</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var record in Records)
        {
            <tr>
                <td>@record.Date</td>
                <td>@record.Description</td>
                <td>@record.Withdrawal</td>
                <td>@record.Deposit</td>
                <td>@record.Balance</td>
                <td>@record.Note</td>
            </tr>
        }
    </tbody>
</table>

<!-- タイムチャート -->
<canvas id="balanceChart" width="800" height="400"></canvas>

@code {
    private List<FinanceRecord> Records = new List<FinanceRecord>
    {
        new FinanceRecord { Date = "2024/12/27", Description = "sample", Withdrawal = 1, Deposit = 0, Balance = 2, Note = "-" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var labels = Records.Select(r => r.Date).ToArray();
            var data = Records.Select(r => r.Balance).ToArray();

            await JSRuntime.InvokeVoidAsync("createChart", "balanceChart", labels, data);
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        // ファイルを取得
        var file = e.File;
        if (file == null)
        {
            return;
        }
        try
        {
            Records.Clear();
            // 必要なエンコーディングプロバイダーを登録
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

            using (var stream = file.OpenReadStream())
            using (var reader = new StreamReader(stream, Encoding.GetEncoding("shift_jis")))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                // CsvHelperを使用してCSVを読み込み
                csv.Context.RegisterClassMap<FinanceRecordMap>(); // カスタムマッピングを登録
                try
                {
                    await foreach (var record in csv.GetRecordsAsync<FinanceRecord>())
                    {
                        Records.Add(record);
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        } catch (Exception ex)
        {
            throw ex;
        }

        StateHasChanged();

        // グラフを更新
        try
        {
            var labels = Records.Select(r => r.Date).ToArray();
            var data = Records.Select(r => r.Balance).ToArray();
            await JSRuntime.InvokeVoidAsync("createChart", "balanceChart", labels, data);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public class FinanceRecord
    {
        public string Date { get; set; }
        public string Description { get; set; }
        public int Withdrawal { get; set; }
        public int Deposit { get; set; }
        public int Balance { get; set; }
        public string Note { get; set; }
    }

    public class FinanceRecordMap : ClassMap<FinanceRecord>
    {
        public FinanceRecordMap()
        {
            Map(m => m.Date).Name("日付");
            Map(m => m.Description).Name("内容");
            Map(m => m.Withdrawal)
                .Name("出金金額(円)")
                .Convert(row =>
                {
                    var field = row.Row.GetField<string>("出金金額(円)");
                    return string.IsNullOrWhiteSpace(field)
                                ? 0
                                : int.Parse(field.Replace(",", ""));
                });
            Map(m => m.Deposit)
                .Name("入金金額(円)")
                .Convert(row => {
                    var field = row.Row.GetField<string>("入金金額(円)");
                    return string.IsNullOrWhiteSpace(field)
                                 ? 0
                         : int.Parse(field.Replace(",", ""));
                });
            Map(m => m.Balance)
                .Name("残高(円)")
                .Convert(row => {
                    var field = row.Row.GetField<string>("残高(円)");
                    return string.IsNullOrWhiteSpace(field)
                                 ? 0
                                 : int.Parse(field.Replace(",", ""));
                });
            Map(m => m.Note).Name("メモ");
        }
    }
}
