@page "/itinerary"
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SQLiteService SQLiteService
@inject ILocalStorageService LocalStorage

<h2>Itinerary</h2>
<p>Your 5-night, 6-day Singapore trip:</p>

<div>
    @if (DayPlans == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <button @onclick="SaveToLocalStorage">Save to Local Storage</button>
        <button @onclick="LoadFromLocalStorage">Load from Local Storage</button>
        @foreach (var plan in DayPlans)
        {
            <DayPlanComponent Plan="plan" OnPlanUpdated="UpdatePlan" />
        }
    }
</div>

<button @onclick="NavigateHome">Back to Home</button>

@code {

    #region プロパティ

    private List<DayPlan>? DayPlans;

    #endregion プロパティ

    #region イベント

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<List<DayPlan>>("dayplan.json");
        if (response != null)
        {
            DayPlans = response;
        }
    }

    #endregion イベント

    #region メソッド

    private void UpdatePlan()
    {
        // 必要ならばデータを保存する処理を追加
        StateHasChanged();
    }

    private async Task SaveToLocalStorage()
    {
        await LocalStorage.SetItemAsync("itinerary", DayPlans);

        Console.WriteLine("Data saved to local storage");
    }

    private async Task LoadFromLocalStorage()
    {
        DayPlans = await LocalStorage.GetItemAsync<List<DayPlan>>("itinerary") ?? new List<DayPlan>();

        Console.WriteLine("Data loaded from local storage");
    }

    private async Task SaveToApi()
    {
        var response = await Http.PostAsJsonAsync("api/itinerary", DayPlans);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Data saved to API");
        }
    }

    private async Task LoadFromApi()

    {
        DayPlans = await Http.GetFromJsonAsync<List<DayPlan>>("api/itinerary") ?? new List<DayPlan>();

        Console.WriteLine("Data loaded from API");
    }

    private async Task InitializeSqliteDb()
    {
        await SQLiteService.InitializeDatabaseAsync();

        await SQLiteService.ExecuteSqlAsync(@"
            CREATE TABLE IF NOT EXISTS DayPlan (
                Day INTEGER PRIMARY KEY,
                Title TEXT
            );
        ");

        Console.WriteLine("Database initialized and table created");
    }

    private async Task SaveSqliteData()
    {
        foreach (var plan in DayPlans)

        {

            var sql = $"INSERT OR REPLACE INTO DayPlan (Day, Title) VALUES ({plan.Day}, '{plan.Title}')";

            await SQLiteService.ExecuteSqlAsync(sql);

        }

        Console.WriteLine("Data saved to SQLite");
    }

    private async Task LoadSqliteData()
    {
        var results = await SQLiteService.QuerySqlAsync("SELECT Day, Title FROM DayPlan");

        DayPlans = results.Select(row => new DayPlan

            {

                Day = Convert.ToInt32(row["Day"]),

                Title = row["Title"].ToString()!

            }).ToList();

        Console.WriteLine("Data loaded from SQLite");
    }

    private void NavigateHome()
    {
        NavigationManager.NavigateTo("/");
    }

    #endregion メソッド

    #region モデル

    public class DayPlan
    {
        public int Day { get; set; }

        public string Title { get; set; } = string.Empty;

        public List<string> Activities { get; set; } = new();
    }

    #endregion モデル
}