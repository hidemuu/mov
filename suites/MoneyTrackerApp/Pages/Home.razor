@page "/"
@inject IJSRuntime JSRuntime

<h3>お金の流れの可視化</h3>

<!-- ファイル選択 -->
<InputFile OnChange="OnFileSelected" />

<!-- 入出金情報テーブル -->
<table class="table">
    <thead>
        <tr>
            <th>日付</th>
            <th>内容</th>
            <th>出金金額(円)</th>
            <th>入金金額(円)</th>
            <th>残高(円)</th>
            <th>メモ</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var record in Records)
        {
            <tr>
                <td>@record.Date</td>
                <td>@record.Description</td>
                <td>@record.Withdrawal</td>
                <td>@record.Deposit</td>
                <td>@record.Balance</td>
                <td>@record.Note</td>
            </tr>
        }
    </tbody>
</table>

<!-- タイムチャート -->
<canvas id="balanceChart" width="800" height="400"></canvas>

@code {
    private List<FinanceRecord> Records = new List<FinanceRecord>
    {
        new FinanceRecord { Date = "2024/12/27", Description = "デビット　８４８８５９", Withdrawal = 801, Deposit = 0, Balance = 183256, Note = "-" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var labels = Records.Select(r => r.Date).ToArray();
            var data = Records.Select(r => r.Balance).ToArray();

            await JSRuntime.InvokeVoidAsync("createChart", "balanceChart", labels, data);
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        // ファイルを取得
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var csvContent = await reader.ReadToEndAsync();
            ParseCsv(csvContent); // CSVをパースしてRecordsに反映
            StateHasChanged();

            // グラフを更新
            var labels = Records.Select(r => r.Date).ToArray();
            var data = Records.Select(r => r.Balance).ToArray();
            await JSRuntime.InvokeVoidAsync("createChart", "balanceChart", labels, data);
        }
    }

    private void ParseCsv(string csvContent)
    {
        Records.Clear();
        var lines = csvContent.Split("\n", StringSplitOptions.RemoveEmptyEntries);

        // 1行目はヘッダーなのでスキップ
        for (int i = 1; i < lines.Length; i++)
        {
            var columns = lines[i].Split(",");
            if (columns.Length < 6) continue;

            Records.Add(new FinanceRecord
                {
                    Date = columns[0],
                    Description = columns[1],
                    Withdrawal = string.IsNullOrWhiteSpace(columns[2]) ? 0 : int.Parse(columns[2]),
                    Deposit = string.IsNullOrWhiteSpace(columns[3]) ? 0 : int.Parse(columns[3]),
                    Balance = string.IsNullOrWhiteSpace(columns[4]) ? 0 : int.Parse(columns[4]),
                    Note = columns[5]
                });
        }
    }

    public class FinanceRecord
    {
        public string Date { get; set; }
        public string Description { get; set; }
        public int Withdrawal { get; set; }
        public int Deposit { get; set; }
        public int Balance { get; set; }
        public string Note { get; set; }
    }
}
