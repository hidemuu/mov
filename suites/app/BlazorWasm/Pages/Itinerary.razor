@page "/itinerary"
@using Blazored.LocalStorage
@using Newtonsoft.Json
@using BlazorWasm.Pages.Components
@using BlazorWasm.Controllers.TravelPlanner.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<h2>Itinerary</h2>
<p>Your 5-night, 6-day Singapore trip:</p>

<div>
    @if (DayPlans == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <button @onclick="SaveToLocalStorage">Save to Local Storage</button>
        <button @onclick="LoadFromLocalStorage">Load from Local Storage</button>
        <button @onclick="LoadFromServer">Load from Server</button>
        @foreach (var plan in DayPlans)
        {
            <DayPlanComponent Plan="plan" OnPlanUpdated="UpdatePlan" />
        }
    }
</div>

<button @onclick="NavigateHome">Back to Home</button>

@code {



    #region プロパティ

    private List<DayPlan>? DayPlans;

    #endregion プロパティ

    #region イベント

    protected override async Task OnInitializedAsync()
    {
        await LoadFromLocalStorage();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // JavaScript関数にC#メソッドを登録
            await JSRuntime.InvokeVoidAsync("setUpdateLocalStorage", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task UpdateLocalStorage()
    {
        // ローカルストレージにデータを保存
        await SaveToLocalStorage();
    }

    #endregion イベント

    #region メソッド

    private void UpdatePlan()
    {
        // 必要ならばデータを保存する処理を追加
        StateHasChanged();
    }

    private async Task SaveToLocalStorage()
    {
        try
        {
            await LocalStorage.SetItemAsync("itinerary", DayPlans);
            if(DayPlans != null)
            {
                var response = await Http.PostAsJsonAsync<List<DayPlan>>("dayplan.json", DayPlans);
                if (!response.IsSuccessStatusCode)
                {
                    var settings = new JsonSerializerSettings
                        {
                            Formatting = Formatting.Indented, // 整形されたJSONにする
                            NullValueHandling = NullValueHandling.Ignore // null値をスキップ
                        };
                    // オブジェクトをJSON形式に変換
                    string json = JsonConvert.SerializeObject(DayPlans, settings);

                    // JSONをファイルに保存
                    var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "dayplan.json");
                    await File.WriteAllTextAsync(filePath, json);
                    Console.WriteLine(json);
                }
            }
            Console.WriteLine("Data saved to local storage");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving to local storage: {ex.Message}");
        }
    }

    private async Task LoadFromLocalStorage()
    {
        try
        {
            var response = await LocalStorage.GetItemAsync<List<DayPlan>>("itinerary");
            if(response != null)
            {
                DayPlans = response;
                Console.WriteLine("Data loaded from local storage");
                return;
            }
            response = await Http.GetFromJsonAsync<List<DayPlan>>("dayplan.json");
            if(response != null)
            {
                DayPlans = response;
                Console.WriteLine("Data loaded from json file");
            }
        }catch (Exception ex)
        {
            Console.WriteLine($"Error loading to local storage: {ex.Message}");
        }
    }

    private async Task LoadFromServer()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<DayPlan>>("dayplan.json");
            if (response != null)
            {
                DayPlans = response;
                Console.WriteLine("Data loaded from json file");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading to local storage: {ex.Message}");
        }
    }

    private async Task SaveToApi()
    {
        var response = await Http.PostAsJsonAsync("api/itinerary", DayPlans);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Data saved to API");
        }
    }

    private async Task LoadFromApi()

    {
        DayPlans = await Http.GetFromJsonAsync<List<DayPlan>>("api/itinerary") ?? new List<DayPlan>();

        Console.WriteLine("Data loaded from API");
    }

    // private async Task InitializeSqliteDb()
    // {
    //     await SQLiteService.InitializeDatabaseAsync();

    //     await SQLiteService.ExecuteSqlAsync(@"
    //         CREATE TABLE IF NOT EXISTS DayPlan (
    //             Day INTEGER PRIMARY KEY,
    //             Title TEXT
    //         );
    //     ");

    //     Console.WriteLine("Database initialized and table created");
    // }

    // private async Task SaveSqliteData()
    // {
    //     foreach (var plan in DayPlans)

    //     {

    //         var sql = $"INSERT OR REPLACE INTO DayPlan (Day, Title) VALUES ({plan.Day}, '{plan.Title}')";

    //         await SQLiteService.ExecuteSqlAsync(sql);

    //     }

    //     Console.WriteLine("Data saved to SQLite");
    // }

    // private async Task LoadSqliteData()
    // {
    //     var results = await SQLiteService.QuerySqlAsync("SELECT Day, Title FROM DayPlan");

    //     DayPlans = results.Select(row => new DayPlan

    //         {

    //             Day = Convert.ToInt32(row["Day"]),

    //             Title = row["Title"].ToString()!

    //         }).ToList();

    //     Console.WriteLine("Data loaded from SQLite");
    // }

    private void NavigateHome()
    {
        NavigationManager.NavigateTo("/");
    }

    #endregion メソッド
}